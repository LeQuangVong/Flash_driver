
FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000364  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000364  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000028c  00000000  00000000  0001038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000143  00000000  00000000  00010619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00010760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  000107e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fd4  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000087c  00000000  00000000  0001180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c27  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00015caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  00015d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000344 	.word	0x08000344

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000344 	.word	0x08000344

08000170 <main>:
 ******************************************************************************
 */

#include <stdint.h>
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Flash_Unlock();                    // Mở khóa Flash
 8000174:	f000 f838 	bl	80001e8 <Flash_Unlock>
	Flash_EraseSector(0x08004000);     // Xóa trang
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <main+0x20>)
 800017a:	f000 f85b 	bl	8000234 <Flash_EraseSector>
	Flash_Write(0x08004000, 0x1234); // Ghi dữ liệu
 800017e:	f241 2134 	movw	r1, #4660	; 0x1234
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x20>)
 8000184:	f000 f884 	bl	8000290 <Flash_Write>
	Flash_Lock();
 8000188:	f000 f846 	bl	8000218 <Flash_Lock>
    /* Loop forever */
	for(;;);
 800018c:	e7fe      	b.n	800018c <main+0x1c>
 800018e:	bf00      	nop
 8000190:	08004000 	.word	0x08004000

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000198:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480c      	ldr	r0, [pc, #48]	; (80001d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490d      	ldr	r1, [pc, #52]	; (80001d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c0a      	ldr	r4, [pc, #40]	; (80001e0 <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001c2:	f000 f89b 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ffd3 	bl	8000170 <main>

080001ca <LoopForever>:

LoopForever:
    b LoopForever
 80001ca:	e7fe      	b.n	80001ca <LoopForever>
  ldr   r0, =_estack
 80001cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d8:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80001dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e4:	e7fe      	b.n	80001e4 <ADC1_2_IRQHandler>
	...

080001e8 <Flash_Unlock>:
#include "my_Flash.h"

void Flash_Unlock(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if((FLASH->CR & (1 << 7)) != 0)
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <Flash_Unlock+0x24>)
 80001ee:	691b      	ldr	r3, [r3, #16]
 80001f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d005      	beq.n	8000204 <Flash_Unlock+0x1c>
	{
		FLASH->KEYR =  0x45670123;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <Flash_Unlock+0x24>)
 80001fa:	4a05      	ldr	r2, [pc, #20]	; (8000210 <Flash_Unlock+0x28>)
 80001fc:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = 0xCDEF89AB;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <Flash_Unlock+0x24>)
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <Flash_Unlock+0x2c>)
 8000202:	605a      	str	r2, [r3, #4]
	}

}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40022000 	.word	0x40022000
 8000210:	45670123 	.word	0x45670123
 8000214:	cdef89ab 	.word	0xcdef89ab

08000218 <Flash_Lock>:
void Flash_Lock(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	FLASH->CR |= (1 << 7);
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <Flash_Lock+0x18>)
 800021e:	691b      	ldr	r3, [r3, #16]
 8000220:	4a03      	ldr	r2, [pc, #12]	; (8000230 <Flash_Lock+0x18>)
 8000222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000226:	6113      	str	r3, [r2, #16]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40022000 	.word	0x40022000

08000234 <Flash_EraseSector>:
void Flash_EraseSector(uint32_t Sector)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	while((FLASH->SR & (1 << 0)) == 1);
 800023c:	bf00      	nop
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <Flash_EraseSector+0x58>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	2b01      	cmp	r3, #1
 8000248:	d0f9      	beq.n	800023e <Flash_EraseSector+0xa>
	FLASH->CR |= (1 << 1);
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <Flash_EraseSector+0x58>)
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	4a0f      	ldr	r2, [pc, #60]	; (800028c <Flash_EraseSector+0x58>)
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	6113      	str	r3, [r2, #16]
	FLASH->AR = Sector;
 8000256:	4a0d      	ldr	r2, [pc, #52]	; (800028c <Flash_EraseSector+0x58>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (1 << 6);
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <Flash_EraseSector+0x58>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	4a0a      	ldr	r2, [pc, #40]	; (800028c <Flash_EraseSector+0x58>)
 8000262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000266:	6113      	str	r3, [r2, #16]
	while((FLASH->SR & (1 << 0)) == 1);
 8000268:	bf00      	nop
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <Flash_EraseSector+0x58>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b01      	cmp	r3, #1
 8000274:	d0f9      	beq.n	800026a <Flash_EraseSector+0x36>
	FLASH->CR &= ~(1 << 1);
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <Flash_EraseSector+0x58>)
 8000278:	691b      	ldr	r3, [r3, #16]
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <Flash_EraseSector+0x58>)
 800027c:	f023 0302 	bic.w	r3, r3, #2
 8000280:	6113      	str	r3, [r2, #16]
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40022000 	.word	0x40022000

08000290 <Flash_Write>:
void Flash_Write(uint32_t Address, uint16_t Data)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
	while((FLASH->SR & (1 << 0)) == 1);
 800029c:	bf00      	nop
 800029e:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <Flash_Write+0x68>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d0f9      	beq.n	800029e <Flash_Write+0xe>
	FLASH->CR |= (1 << 0);
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <Flash_Write+0x68>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <Flash_Write+0x68>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6113      	str	r3, [r2, #16]
	*(uint16_t *)Address = Data;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	887a      	ldrh	r2, [r7, #2]
 80002ba:	801a      	strh	r2, [r3, #0]

	while((FLASH->SR & (1 << 0)) == 1);
 80002bc:	bf00      	nop
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <Flash_Write+0x68>)
 80002c0:	68db      	ldr	r3, [r3, #12]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d0f9      	beq.n	80002be <Flash_Write+0x2e>

	if((FLASH->SR & (1 << 5)))
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <Flash_Write+0x68>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	f003 0320 	and.w	r3, r3, #32
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d005      	beq.n	80002e2 <Flash_Write+0x52>
	{
		FLASH->SR |= (1 << 5);
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <Flash_Write+0x68>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <Flash_Write+0x68>)
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	60d3      	str	r3, [r2, #12]
	}

	FLASH->CR &= ~(1 << 0);
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <Flash_Write+0x68>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <Flash_Write+0x68>)
 80002e8:	f023 0301 	bic.w	r3, r3, #1
 80002ec:	6113      	str	r3, [r2, #16]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40022000 	.word	0x40022000

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	2600      	movs	r6, #0
 8000300:	4d0c      	ldr	r5, [pc, #48]	; (8000334 <__libc_init_array+0x38>)
 8000302:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	f000 f81a 	bl	8000344 <_init>
 8000310:	2600      	movs	r6, #0
 8000312:	4d0a      	ldr	r5, [pc, #40]	; (800033c <__libc_init_array+0x40>)
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <__libc_init_array+0x44>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
